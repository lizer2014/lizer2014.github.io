<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[mongo备份测试(cp vs mongodump)]]></title>
    <url>%2F2019%2F09%2F21%2Fmongo%E5%A4%87%E4%BB%BD%E6%B5%8B%E8%AF%95-cp-vs-mongodump%2F</url>
    <content type="text"><![CDATA[mongo 备份测试环境db3 router3 config3 shard (3 repl / shard) oplog: 10Gcache: 1Gmaxconn: 8000 replSet name node name type ip port role dbpd_dafs_config dbpd_dafs_config0 config 10.255.2.67 8600 master dbpd_dafs_config dbpd_dafs_config1 config 10.255.2.69 8600 slave dbpd_dafs_config dbpd_dafs_config2 config 10.255.2.70 8600 slave —————— ——————– ——– ————- ——- ——– single single0 router 10.255.2.67 20600 none single single1 router 10.255.2.69 20600 none single single2 router 10.255.2.70 20600 none —————— ——————– ——– ————- ——- ——– dbpd_dafs_shard0 dbpd_dafs_shard0d0 shard 10.255.2.67 9600 master dbpd_dafs_shard0 dbpd_dafs_shard0d1 shard 10.255.2.69 9600 slave dbpd_dafs_shard0 dbpd_dafs_shard0d2 shard 10.255.2.70 9600 slave —————— ——————– ——– ————- ——- ——– dbpd_dafs_shard1 dbpd_dafs_shard1d0 shard 10.255.2.67 9601 master dbpd_dafs_shard1 dbpd_dafs_shard1d1 shard 10.255.2.69 9601 slave dbpd_dafs_shard1 dbpd_dafs_shard1d2 shard 10.255.2.70 9601 slave 硬盘性能这里备份和数据盘是在同一个，拷贝时的性能如下iostat -x 1 10avg-cpu: %user %nice %system %iowait %steal %idle 0.34 0.00 0.73 2.39 0.00 96.55 Device: rrqm/s wrqm/s r/s w/s rkB/s wkB/s avgrq-sz avgqu-sz await r_await w_await svctm %utilsda 0.00 0.00 532.00 3195.00 104532.00 816160.00 494.07 109.54 29.21 80.97 20.59 0.27 99.90 备份是在压测完后 性能监测mongostat –port 20600 -u mgmon -p wbdba –authenticationDatabase adminmongostat: (1 mongos)insert query update delete getmore command flushes mapped vsize res faults qrw arw net_in net_out conn time *0 *0 8834 *0 0 8880|0 0 0B 3.74G 446M 0 0|0 0|0 12.9m 2.25m 3160 Sep 16 13:00:44.214 *0 *0 13234 *0 0 12656|0 0 0B 3.74G 446M 0 0|0 0|0 18.4m 3.36m 3160 Sep 16 13:00:45.213 *0 *0 20691 *0 0 19966|0 0 0B 3.74G 446M 0 0|0 0|0 29.0m 5.23m 3160 Sep 16 13:00:46.217 *0 *0 16649 *0 0 17994|0 0 0B 3.74G 446M 0 0|0 0|0 26.1m 4.22m 3160 Sep 16 13:00:47.213 *0 *0 9610 *0 0 9619|0 0 0B 3.74G 446M 0 0|0 0|0 14.0m 2.44m 3160 Sep 16 13:00:48.214[OVERALL], RunTime(ms), 744887[OVERALL], Throughput(ops/sec), 26849.71009025532000w 测试说明数据集:1 record = 10 fields * 100 char2000w ~= 22G(data) ~= 34(storage) 每个集合采用分片，3 shard平均分布sh.enableSharding(“webank”)sh.shardCollection(“webank.lizer_2000w”,{_id:1})sh.shardCollection(“webank.lizer_2000w_b”,{_id:1})sh.shardCollection(“webank.lizer_2000w_c”,{_id:1})sh.shardCollection(“webank.lizer_2000w_d”,{_id:1})sh.shardCollection(“webank.lizer_8000w”,{_id:1})sh.shardCollection(“webank.lizer_16000w”,{_id:1})数据导入ycsb，平均2w~5w ops(upsert)./bin/ycsb load mongodb -threads 4000 -P workloads/2000w 1&gt;logs/2000w.log 2&gt;logs/2000w.err &amp;./bin/ycsb load mongodb -threads 4000 -P workloads/2000w_b 1&gt;logs/2000w_b.log 2&gt;logs/2000w_b.err &amp;./bin/ycsb load mongodb -threads 1000 -P workloads/2000w_c 1&gt;logs/2000w_c.log 2&gt;logs/2000w_c.err &amp;./bin/ycsb load mongodb -threads 80 -P workloads/2000w_d 1&gt;logs/2000w_d.log 2&gt;logs/2000w_d.err &amp;./bin/ycsb load mongodb -threads 80 -P workloads/8000w 1&gt;logs/8000w.log 2&gt;logs/8000w.err &amp;./bin/ycsb load mongodb -threads 80 -P workloads/16000w 1&gt;logs/16000w.log 2&gt;logs16000w.err &amp; 备份时，是在数据压力下（有大量的ops时，经常备份失败，跟oplog cache大小和ops大小有关）primary shard2mongodump 导出采用了gzip，备份集会小些，消耗会有提升job=4同时mongodump备份使用了cron每分钟检查，所以一般都是3个分片同时备份，io会有些影响 每个分片耗时空间比较(cp和mongodump –oplog –gzip)job=4| storage/G | data/G | max_c/G | num_c | cp min | cp size | dump min(zip) | dump size(zip) | dump min | dump size ||———–|——–|———|——-|——–|———|—————|—————-|———-|———–|| 22 | 14 | 7 | 2 | | | 6 | 11 | | || 33 | 21 | 7 | 3 | | | 6 | 16 | | || 44 | 28 | 7 | 4 | | | 8 | 24 | | || 91 | 57 | 29 | 5 | 4 | 100 | 25,22 | 45,42 | 4.4 | 59 || 156 | 114 | 57 | 6 | 9 | 150 | 110 | 82 | 24 | 115 | job=6| shard | storage/G | data/G | max_c/G | num_c | cp min | cp size | dump min(zip) | dump size(zip) | dump min | dump size ||——–|———–|——–|———|——-|——–|———|—————|—————-|———-|———–|| shard1 | 114 | 129 | 56.64 | 6 | 4.96 | 145G | 53.50 | 82G | 22.88 | 115G || shard2 | 194 | 113 | 62.04 | 6 | 7.33 | 164G | 61.26 | 81G | 24.21 | 114G || shard3 | 141 | 120 | 55.33 | 6 | 6.33 | 148G | 63.85 | 86G | 26.85 | 121G ||——–|———–|——–|———|——-|——–|———|—————|—————-|———-|———–|| shard1 | 64 | 58 | 28.73 | 5 | 1.68 | 61G | 26.85 | 42G | 4.05 | 59G || shard2 | 132 | 57 | 29 | 5 | 2.93 | 101G | 32.98 | 41G | 11.80 | 58G || shard3 | 74 | 58 | 29.26 | 5 | 1.98 | 79G | 27.25 | 42G | 6.43 | 59G ||——–|———–|——–|———|——-|——–|———|—————|—————-|———-|———–|| shard1 | 34 | 29 | 8.3 | 4 | 0.83 | 31G | 7.73 | 21G | 3.01 | 30G || shard2 | 50 | 28 | 5.77 | 4 | 1.93 | 70G | 8.66 | 21G | 3.08 | 29G || shard3 | 43 | 29 | 7.67 | 4 | 1.30 | 48G | 7.08 | 21G | 2.63 | 30G ||——–|———–|——–|———|——-|——–|———|—————|—————-|———-|———–|| shard1 | 25 | 20 | 6.81 | 3 | 0.36 | 23G | 6.61 | 15G | 2.13 | 21G || shard2 | 44 | 22 | 7.35 | 3 | 1.76 | 64G | 7.18 | 17G | 2.63 | 23G || shard3 | 24 | 21 | 7.58 | 3 | 0.90 | 40G | 6.53 | 16G | 2.33 | 22G | 分析 mongodump mongodump 采用的是collections级别的多线程并发，备份速度跟最大集合的大小有很大关系 默认备份是4job2019-09-17T18:47:24.862+0800 [……………………] webank.lizer_2000w 243014/6599570 (3.7%)2019-09-17T18:47:24.862+0800 [……………………] webank.lizer_8000w 500216/26422088 (1.9%)2019-09-17T18:47:24.862+0800 [###…………………] webank.lizer_2000w_b 886019/6421483 (13.8%)2019-09-17T18:47:24.862+0800 [……………………] webank.lizer_2000w_d 200147/7633598 (2.6%)2019-09-17T18:47:24.862+0800 全备时指定–oplog，当备份oplog时间过长，备份开始被记录oplog 点被刷出，备份oplog失败2019-09-16 13:41:10 - [ERROR] - [ dbpd_dafs_shard1 : 9601 ] fullbackup fail, will try next time…2019-09-16T13:41:10.339+0800 Failed: oplog overflow: mongodump was unable to capture all new oplog entries during execution mongodump会拖慢oplog的回放速度，当ops很大时（测试时4w ops），oplog不够大，从库变为recovery模式（需要重新全量从其他库同步）2019-09-17T11:25:35.147+0800 Failed: error writing data for collection webank.lizer_2000w to disk: error reading collection: EOF 分片为了负载均衡，balancer会movechunk，版本会变化，导致报错2019-09-16 14:00:50 - [ERROR] - [ dbpd_dafs_shard1 : 9601 ] fullbackup fail, will try next time…2019-09-16T14:00:50.436+0800 Failed: error dumping oplog: error writing data for collection .oplog to disk: cannot dump with oplog if admin.system.version is modified db.system.version.find(){ “_id” : “featureCompatibilityVersion”, “version” : “3.6” }{ “_id” : “authSchema”, “currentVersion” : 5 }{ “_id” : “shardIdentity”, “clusterId” : ObjectId(“5d2c1fb40d084aac6626a93e”), “shardName” : “dbpd_dafs_shard1”, “configsvrConnectionString” : “dbpd_dafs_config/10.255.2.67:8906,10.255.2.69:8906,10.255.2.70:8906” }{ “_id” : “minOpTimeRecovery”, “configsvrConnectionString” : “dbpd_dafs_config/10.255.2.67:8906,10.255.2.69:8906,10.255.2.70:8906”, “minOpTime” : { “ts” : Timestamp(1568612543, 14678), “t” : NumberLong(11) }, “minOpTimeUpdaters” : 0, “shardName” : “dbpd_dafs_shard1” }{ “_id” : “startRangeDeletion”, “ns” : “webank.lizer_2000w_b”, “epoch” : ObjectId(“5d7f1575b43a1fb988beedd8”), “min” : { “_id” : “user5779780441414634474” }, “max” : { “_id” : “user5793529265481788866” } } 恢复，应用备份-&gt;rebuild index-&gt;应用oplog，恢复时间更长 空间小 cp 需要fsyncLock， 速度快 恢复快，无需重建索引 占用空间较大 恢复后需要修改配置文件（ip，port，分片关系，副本集） 备份脚本当前脚本 每分钟循环检测当前状态是否需要备份（前提是slave，跳过master、recovery） 每次备份检测时，都检查当前的分片备份目录是否存在pid文件，存在说明已有进程在备份，跳过后续步骤 当没有全备||周六且无其他当天的备份||fullback.lock 触发全备(mongodump) 增备条件为oplog使用量大于0.5，已经备份oplog windows占总windows比例小于0.8 当增备时，最近的增备或全备的最后的oplog record被oplog cap刷出，则touch fullback.lock，下次检测时触发全备 问题 mongodump全备速率慢 增备策略需要优化，当突增大量的文档更新操作时，oplog容易被刷出，导致增备失败 对于分片，开启了collection shard，balancer和手动movechunk 会产生大量的oplog，其次版本变化导致全备失败 mongodump会拖慢oplog的回放速度，测试时，两个从库，mongodump的更容易变成recovery模式（需要手动重新全量同步） 控制节点增备策略问题，增备oplog增长比较慢，很难触发增备 改进 全备改用cp选项，（fsynclock） 防止硬盘的IO过高，增加可同时进行全备的个数 增备策略 优化控制节点的备份 其他 oplog 数据collection的drop，在oplog中记录为一条cmd，不会产生大量的oplog 数据的movechunk记录的时一条条d/i，oplog可能会被刷出dbpd_dafs_shard0:SECONDARY&gt; db.oplog.rs.find({“ns”:{$ne:””}}).sort({$natural:-1}).limit(10){ “ts” : Timestamp(1568758966, 3314), “t” : NumberLong(10), “h” : NumberLong(“4434686517193231122”), “v” : 2, “op” : “c”, “ns” : “config.$cmd”, “ui” : UUID(“0e25def1-a270-4136-9e5d-87ce4a04219c”), “wall” : ISODate(“2019-09-17T22:22:46.411Z”), “o” : { “drop” : “cache.chunks.webank.lizer_16000w” } }{ “ts” : Timestamp(1568758966, 3313), “t” : NumberLong(10), “h” : NumberLong(“4547986359210973331”), “v” : 2, “op” : “d”, “ns” : “config.cache.collections”, “ui” : UUID(“c51c0ca2-c708-413d-892d-df930745bf30”), “wall” : ISODate(“2019-09-17T22:22:46.411Z”), “o” : { “_id” : “webank.lizer_16000w” } }{ “ts” : Timestamp(1568758964, 4), “t” : NumberLong(10), “h” : NumberLong(“-2093926210899775967”), “v” : 2, “op” : “c”, “ns” : “webank.$cmd”, “ui” : UUID(“d5b23f5d-68eb-4bb8-9e63-979c1e8e3ba4”), “wall” : ISODate(“2019-09-17T22:22:44.432Z”), “o” : { “drop” : “lizer_16000w” } }{ “ts” : Timestamp(1568729753, 6255), “t” : NumberLong(10), “h” : NumberLong(“-2146114616361287121”), “v” : 2, “op” : “d”, “ns” : “webank.lizer_16000w”, “ui” : UUID(“d5b23f5d-68eb-4bb8-9e63-979c1e8e3ba4”), “fromMigrate” : true, “wall” : ISODate(“2019-09-17T14:15:53.420Z”), “o” : { “_id” : “user213834907078841758” } } oplog相关进程ReplBatcherrsSync-0WT OplogTruncaterThread: local.oplog.rsmonitoring keys for HMAC]]></content>
      <categories>
        <category>mongo</category>
      </categories>
      <tags>
        <tag>mongodump</tag>
        <tag>backup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nodejs安装Hexo搭建博客]]></title>
    <url>%2F2019%2F07%2F31%2FNodejs%E5%AE%89%E8%A3%85Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[使用nodejs的hexo插件，生成静态网页，然后部署到github上，使用github pages实现静态博客。hexo主题选用Next，评论系统可以使用gitalk。 安装nodejshttps://nodejs.org/dist/latest-v6.x/node-v6.17.1-win-x64.zip下载解压，设置环境变量 下载安装githttps://github.com/git-for-windows/git/releases/download/v2.22.0.windows.1/Git-2.22.0-64-bit.exe 安装hexo需要指定版本安装，因为版本的变化，经常会导致出现各种问题npm install -g hexo-cli@1.1.0 本地搭建hexohexo init blogcd blog 调式运行博客：hexo server 本地访问localhost:4000 ctrl+c可结束运行 博客关联githubgithub注册账号lizer2014创建仓库lizer2014.github.io git配置12git config --global user.name &quot;lizer2014&quot;git config --global user.email &quot;646136740@qq.com&quot; git配置查看 12git config --global user.namegit config --global user.email 生成密钥ssh-keygen -t rsa -C “646136740@qq.com“将id_rsa.pub文件添加到github的ssh keys上 配置hexo的部署信息blog项目下_config.yml文件，修改Deploymentdeploy: type: git repo: git@lizer2014.com:lizer2014/lizer2014.github.io.git branch: master hexo部署到github上cd blognpm install hexo-deployer-git@0.3.0 –save 生成静态文件部署到githubhexo cleanhexo generatehexo deploy 绑定域名github setting custom domain 永久访问此时有一个问题是每次更新博客都要在github上设置一次的个性域名, 这是因为在更新博客的时候会把CNAME文件给删除, 我们在blog/source目录添加一个CNAME文件可解决. 注意文件无后缀. 键入lizer2016.cn保存即可 Next主题安装后面会有两个配置，一个是博客配置，一个是主题配置所有命令行命令全部是在博客根目录打开命令行下输入的git clone https://github.com/theme-next/hexo-theme-next themes/nextnext 7.2.0安装完成后，打开博客配置文件修改最上方的theme项为next 修改语言修改博客配置文件下的language项为zh-CNtitle: lizer’s blogsubtitle:description: 我啊~嘿嘿keywords:author: lizerlanguage: zh-CNtimezone: 修改菜单及创建分类页修改主题配置文件下的menu项，按需要打开菜单。例如我需要把标签页面打开，就把tags项前面的#去掉就行了。随后根据标签页或者分类页输入: hexo new page categories // 来新建出分类页hexo new page tags // 新建出标签页。hexo new page about // 新建出关于页 menu: home: / || home categories: /categories/ || th tags: /tags/ || tags about: /about/ || user archives: /archives/ || archive 在source每个对应页添加type和制定模板 修改主题风格Next自带四种主题风格，可以在主题配置文件搜索Scheme项，将需要的风格前的#去掉，注意只能开启一个风格。我是用的是Gemini主题 设置作者头像编辑主题配置文件，搜索修改字段 avatar， 值设置成头像的链接地址。可以设置成在线的图片地址。也可以把图片放在本地。本地设置：放置在source/images目录下，设置为url: /images/avatar.jpgavatar: url: /images/avatar.jpg rounded: true rotated: true 这个rounded项可以设置头像为圆形，设置为ture后会自动根据头像的尺寸将头像变化为圆形或者椭圆，头像图片为正方形的话则为圆形。长方形的话长宽相差越大，椭圆越明显。设置opacity的值控制头像的透明度，值为0 - 1。rotated项为头像旋转，设置为true，则鼠标指到头像时头像会旋转。 设置代码高亮主题NexT 使用 Tomorrow Theme作为代码高亮，共有5款主题供你选择。 NexT 默认使用的是 白色的 normal 主题，可选的值有 normal，night， night blue， night bright， night eighties更改 主题配置文件中的highlight_theme 字段，将其值设定成你所喜爱的高亮主题即可。 侧边栏社交链接侧栏社交链接的修改包含两个部分， 配置在 主题配置文件 中。social字段为连接，格式为显示文本: 链接地址 || Font Awesome图标名称 图标名称 是 Font Awesome 图标的名字（不必带 fa- 前缀）。enable 选项用于控制是否显示图标，你可以设置成 false 来去掉图标。例如: 百度: https://baidu.com || firefoxFont Awesome图标可以到Font Awesome查看 设置RSSNexT 中 RSS 有三个设置选项，满足特定的使用场景。 更改主题配置文件，设定 rss 字段的值：false：禁用 RSS，不在页面上显示 RSS 连接。留空：默认就是留空的，使用 Hexo 生成的 Feed 链接。 你可以需要先安装 hexo-generator-feed 插件。安装方法：根目录下命令行输入 npm install hexo-generator-feed –save 设置网站图标在EasyIcon中分别找一张（16 16与32 32）的ico图标,或者去别的网站下载或者制作，并将图标名称改为favicon16.ico与favicon32.ico，然后把图标放在/themes/next/source/images或者放在根目录的/source/images文件夹里。在主题配置文件内搜索favicon字段，把 small、medium字段的地址修改为/images/favicon16.ico 与 /images/favicon32.ico 实现全站/文章数字统计/阅读时长根目录命令运行npm install hexo-symbols-count-time –save博客配置文件底部添加如下内容，保存。symbols_count_time: symbols: true time: true total_symbols: true total_time: true 添加顶部加载条最新版本的Next主题是内置了加载条功能的。根目录打开命令行，输入如下命令： git clone https://github.com/theme-next/theme-next-pace themes/next/source/lib/pace然后主题配置文件搜索pace字段，修改pace: false为pace: true即可开启加载条功能，修改下方的pace-theme字段还可以修改加载条的样式。pace: enable: true theme: bounce 修改网页底部的小图标主题配置文件搜索footer字段，修改下方的icon字段下的name字段。name字段后的名字是 Font Awesome 图标的名字（不必带 fa- 前缀）。 animated自动为闪动开关，设置为true后图标会闪动。以及可以设置图标颜色，color处填入16进制颜色代码即可。注意保留原来的双引号。 去掉页面底部的强力驱动信息及设置备案信息主题配置文件搜索copyright字段，修改powered下的enable字段的true为false即可去掉强力驱动部分的内容。 同样的theme下的enable设置为false的话可以去掉页面底部的主题信息。 如果博客有备案的话，下方beian字段设置为true，icp后填写备案号。 添加动态背景根目录打开命令行，输入：git clone https://github.com/theme-next/theme-next-canvas-nest themes/next/source/lib/canvas-nest主题配置文件搜索canvas-nest字段，enable项设置为true。 增加回到顶部按钮及显示当前浏览进度主题配置文件搜索b2t字段，将b2t字段的false修改为true即可，（注意此功能只能用于Pisces和Gemini主题）。将下方的scrollpercent字段设置为true即可实现当前浏览进度的显示。 增加本地搜索功能首先安装插件，根目录命令行输入npm install hexo-generator-searchdb –save编辑博客配置文件，新增以下内容到任意位置：search: path: search.xml field: post format: html limit: 10000主题配置文件搜索local_search字段，设置enable为true 修改文章底部的那个带#号的标签修改模板/themes/next/layout/_macro/post.swig，搜索 rel=”tag”&gt;#，将 # 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;，此处的图标用的是Font-Awesome，可以根据需要换成其他的图标。 在每篇文章末尾统一添加“本文结束”标记在路径 \themes\next\layout_macro 中新建 passage-end-tag.swig 文件,并添加以下内容： 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 接着打开\themes\next\layout_macro\post.swig文件，在post-body 之后， post-footer 之前添加如下代码： 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;passage-end-tag.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 增加网站访问量统计在主题设置文件中搜索busuanzi, 设置:busuanzi_count: enable: true total_visitors: true total_visitors_icon: user total_views: true total_views_icon: eye post_views: true post_views_icon: eye 文章更新文章中添加图片本地存储的方式添加图片(我使用的方法)开启资源文件夹功能. 在 _config.yml 文件中设置 post_asset_folder: true在根目录下执行: npm install https://github.com/CodeFalling/hexo-asset-image –save确保在 source/_posts 下创建和 markdown 文件同名的文件夹，里面存放需要的图片，然后在 markdown 中插入图片 ! hexo image 文章中添加下载资源在source目录下新建download文件夹，将需要上传的文件复制到该目录, 例如xx.xls. 在_posts博文中，插入： 点击下载值得注意的是, txt/md/jpg/png等格式点击会直接在浏览器打开, 想下载的话, 需要复制链接到下载软件中下载 首页自动折叠主题配置文件auto_excerpt: enable: true length: 200 打赏主题配置reward_settings:Front-matter. enable: true animation: false comment: 等我熬尽一日苦，喂你一口甜 reward: wechatpay: /images/wechatpay.png 在每篇文章末尾统一添加“本文结束”标记在路径 \themes\next\layout_macro 中新建 passage-end-tag.swig 文件,并添加以下内容： 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 接着打开\themes\next\layout_macro\post.swig文件，在post-body 之后， post-footer 之前添加如下代码： 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;passage-end-tag.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 更新文章文件根目录命令行输入hexo new &lt;模板&gt; &lt;文章名&gt;新建文章其中&lt;模板&gt;在scaffolds中，默认情况下有三个模板post、draft、page 参数 功能 路径post 新建文章 /source/_posts/draft 新建草稿 /source/_drafts/page 新建页面（标签页，分类页等） /source/ 更新普通文章在blog目录下执行： new post “post1”123456789101112131415161718192021222324- 编辑该文件（遵循Markdown规则）- 修改起始字段 - title 文章的标题 - date 创建日期 （文件的创建日期 ） - updated 修改日期 （ 文件的修改日期） - comments 是否开启评论 true - tags 标签 //建议使用分类 - categories 分类 //建议使用分类 - permalink url中的名字（文件名）- 编写正文内容（MakeDown）- hexo clean 删除本地静态文件（Public目录），可不执行。- hexo g 生成本地静态文件（Public目录）- hexo d 将本地静态文件推送至github## gitalk实现hexo博客评论功能Register Application在GitHub上注册新应用，链接：https://github.com/settings/applications/newApplication name： # 应用名称，随意Homepage URL： # 网站URLApplication description # 描述，随意Authorization callback URL：# 网站URL主题配置 gitalk: enable: true github_id: lizer2014 # GitHub repo owner repo: lizer2014.gitHub.io # Repository name to store issues client_id: # GitHub Application Client ID client_secret: # GitHub Application Client Secret admin_user: lizer2014 # GitHub repo owner and collaborators, only these guys can initialize gitHub issues distraction_free_mode: true # Facebook-like distraction free modeforce language value``` 分享NeedMoreShare2git clone https://github.com/theme-next/theme-next-needmoreshare2 source/lib/needsharebutton 主题配置needmoreshare2: enable: true postbottom: enable: true options: iconStyle: default boxForm: horizontal position: bottomCenter networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook 博客迁移npm install hexo-migrator-rss –save插件安装完成后，执行下列命令，从 RSS 迁移所有文章。source 可以是文件路径或网址。$ hexo migrate rss 参考：Next主题安装与优化使用gittalk实现hexo博客评论功能]]></content>
      <categories>
        <category>Nodejs</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>nodejs</tag>
        <tag>next</tag>
        <tag>github</tag>
        <tag>gitalk</tag>
      </tags>
  </entry>
</search>
